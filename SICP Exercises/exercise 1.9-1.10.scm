; Exercise 1.9-1.10

; Exercise 1.9
; Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.

; procedure 1
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))
; procedure 2
(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

; Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive?

; Answer:
; Procedure 1 is recursive processs
(+ 4 5)
; -->
(inc (+ (dec 4) 5))
; -->
(inc (+ 3 5))
; -->
(inc (inc (+ (dec 3) 5)))
; -->
(inc (inc (+ 2 5)))
; -->
(inc (inc (inc (+ (dec 2) 5))))
; -->
(inc (inc (inc (+ 1 5))))
; -->
(inc (inc (inc (inc (+ (dec 1) 5)))))
; -->
(inc (inc (inc (inc (+ 0 5)))))
; -->
(inc (inc (inc (inc 5))))
; -->
(inc (inc (inc 6)))
; -->
(inc (inc 7))
; -->
(inc 8)
; -->
9

; Procedure 2 is irative process
(+ 4 5)
; -->
(+ (dec 4) (inc 5))
; -->
(+ 3 6)
; -->
(+ (dec 3) (inc 6))
; -->
(+ 2 7)
; -->
(+ (dec 2) (inc 7))
; -->
(+ 1 8)
; -->
(+ (dec 1) (inc 8))
; -->
(+ 0 9)
; -->
9

; The easiest way to spot that the first process is recursive (without writing out the substitution) is to note that the "+" procedure calls itself at the end while nested in another expression; the second calls itself, but as the top expression.

***********************************************************

; Exercise 1.10. The following procedure computes a mathematical function called Ackermann’s function.

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

; What are the values of the following expressions?

(A 1 10)
(A 2 4)
(A 3 3)

; Answers
(A 1 10)
; -->
(A (- 1 1) (A 1 (- 10 1)))
; -->
(A 0 (A 1 9))
; -->
(A 0 (A (- 1 1) (A 1 (- 9 1))))
; -->
(A 0 (A 0 (A 1 8)))
; -->
(A 0 (A 0 (A (- 1 1) (A 1 (- 8 1)))))
; -->
(A 0 (A 0 (A 0 (A 1 7))))
; -->
(A 0 (A 0 (A 0 (A (- 1 1) (A 1 (- 7 1))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 1 6)))))
; -->
(A 0 (A 0 (A 0 (A 0 (A (- 1 1) (A 1 (- 6 1)))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A (- 1 1) (A 1 (- 5 1))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A (- 1 1) (A 1 (- 4 1)))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A (- 1 1) (A 1 (- 3 1))))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A (- 1 1) (A 1 (- 2 1)))))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (* 2 2)))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (* 2 4))))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (* 2 8)))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 (* 2 16))))))
; -->
(A 0 (A 0 (A 0 (A 0 (A 0 32)))))
; -->
(A 0 (A 0 (A 0 (A 0 (* 2 32)))))
; -->
(A 0 (A 0 (A 0 (A 0 64))))
; -->
(A 0 (A 0 (A 0 (* 2 64))))
; -->
(A 0 (A 0 (A 0 128)))
; -->
(A 0 (A 0 (* 2 128)))
; -->
(A 0 (A 0 256))
; -->
(A 0 (* 2 256))
; -->
(A 0 512)
; -->
(* 2 512)
; -->
1024

(A 2 4);65536
(A 3 3);65536

; Consider the following procedures, where A is the procedure defined above:

(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))

; Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes 5n₂.

; Answer

(define (f n) (A 0 n))
; since -->
(define (f n) (* 2 n))
; procedure f computes 2n

;----------------------------------------------------------

(define (g n) (A 1 n))
; since -->
(define (g n) (A (- 1 1) (A 1 (- n 1))))
; -->
(define (g n) (A 0 (A 1 (- n 1))))
; -->
(define (g n) (* 2 (A 1 (- n 1))))

(g 0); 0
(g 1); 2
(g 2); 4
(g 3); 8
(g 4); 16
; procedure g computes 2ⁿ

;----------------------------------------------------------

(define (h n) (A 2 n))
; since -->
(define (h n) (A (- 2 1) (A 2 (- n 1))))
; -->
(define (h n) (A 1 (A 2 (- n 1))))

(h 0); 0
(h 1); 2
(h 2); 4
(h 3); 16
(h 4); 65536
; procedure h computes 2^2^… (n-1 times)

